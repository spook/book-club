#!/usr/bin/perl -w
# book-club is a sequenced process launcher, useful as a test driver

use strict;
use v5.10;
use Time::HiRes qw/sleep/;

my @WPIDS;
my @RPIDS;
my $WCMD = 'sleep 1000';    # Replace this with the real command
my $RCMD = 'sleep 1000';    # Replace this with the real command
my $KEEP = 0;
my $VERB = 0;

foreach my $op (@ARGV) {
    $op =~ s{^-+}{};
    if ($op eq 'k') {
        say "Keeping child processes";
        $KEEP = 1;
    }
    elsif ($op eq 'v') {
        $VERB = 1;
    }
    elsif ($op =~ m{^d([\d\.]*)}) {
        my $secs = $1;
        say "Delay $secs";
        sleep $secs;
    }
    elsif ($op =~ m{([rw])([-+=]?)(\d+)}) {
        my $cmd = $1;
        my $pm  = $2;
        my $d   = $3;
        my $was = scalar @WPIDS;
        my $new = !$pm       ? $d
                : $pm eq '=' ? $d
                : $pm eq '+' ? $was + $d
                : $was > $d  ? $was - $d
                : 0          ;
        my $name = $cmd eq 'r' ? 'Reader' : 'Writer';
        say "$name $op : $was -> $new";
        if ($new > $was) {
            for my $n ($was+1 .. $new) {
                my $pid = spawn($cmd eq 'r'? $RCMD : $WCMD);
                say "  Launch w$n\tpid $pid" if $VERB;
                if ($cmd eq 'r') {push @RPIDS, $pid}
                else             {push @WPIDS, $pid}
            }
        }
        elsif ($new < $was) {
            for (my $n=$was; $n > $new; --$n) {
                say "  Kill w$n";
                my $bye = $cmd eq 'r' ? pop @RPIDS
                                      : pop @WPIDS;
                die "*** Cannot kill PID $bye\n" unless kill 'KILL', $bye;
            }
        }
    }
    else {
        warn "--- Unknown operation $op, skipped";
   }
}
say scalar(@ARGV) . " operations complete";

if (@RPIDS || @WPIDS) {
    if ($KEEP) {
        say "Keeping " . (scalar(@WPIDS) + scalar(@RPIDS)) . " running";
    }
    else {
        say "Cleanup...";
        foreach my $pid (@WPIDS, @RPIDS) {
            kill 'KILL', $pid;
        }
        say "  done.";
    }
}
exit 0;

sub spawn {
    my $cmd = shift;
    my $pid = fork;
    die "*** Cannot spawn command\n" unless defined $pid;
    return $pid if $pid;
    exec $cmd;
    die "*** exec() failed with cmd: $cmd\n";
}


